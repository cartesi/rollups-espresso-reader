//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EspressoBlock = newEspressoBlockTable("espresso", "espresso_block", "")

type espressoBlockTable struct {
	postgres.Table

	// Columns
	ApplicationAddress         postgres.ColumnString
	LastProcessedEspressoBlock postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EspressoBlockTable struct {
	espressoBlockTable

	EXCLUDED espressoBlockTable
}

// AS creates new EspressoBlockTable with assigned alias
func (a EspressoBlockTable) AS(alias string) *EspressoBlockTable {
	return newEspressoBlockTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EspressoBlockTable with assigned schema name
func (a EspressoBlockTable) FromSchema(schemaName string) *EspressoBlockTable {
	return newEspressoBlockTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EspressoBlockTable with assigned table prefix
func (a EspressoBlockTable) WithPrefix(prefix string) *EspressoBlockTable {
	return newEspressoBlockTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EspressoBlockTable with assigned table suffix
func (a EspressoBlockTable) WithSuffix(suffix string) *EspressoBlockTable {
	return newEspressoBlockTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEspressoBlockTable(schemaName, tableName, alias string) *EspressoBlockTable {
	return &EspressoBlockTable{
		espressoBlockTable: newEspressoBlockTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newEspressoBlockTableImpl("", "excluded", ""),
	}
}

func newEspressoBlockTableImpl(schemaName, tableName, alias string) espressoBlockTable {
	var (
		ApplicationAddressColumn         = postgres.StringColumn("application_address")
		LastProcessedEspressoBlockColumn = postgres.FloatColumn("last_processed_espresso_block")
		allColumns                       = postgres.ColumnList{ApplicationAddressColumn, LastProcessedEspressoBlockColumn}
		mutableColumns                   = postgres.ColumnList{LastProcessedEspressoBlockColumn}
	)

	return espressoBlockTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ApplicationAddress:         ApplicationAddressColumn,
		LastProcessedEspressoBlock: LastProcessedEspressoBlockColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
