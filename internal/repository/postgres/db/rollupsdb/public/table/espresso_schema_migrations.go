//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EspressoSchemaMigrations = newEspressoSchemaMigrationsTable("public", "espresso_schema_migrations", "")

type espressoSchemaMigrationsTable struct {
	postgres.Table

	// Columns
	Version postgres.ColumnInteger
	Dirty   postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EspressoSchemaMigrationsTable struct {
	espressoSchemaMigrationsTable

	EXCLUDED espressoSchemaMigrationsTable
}

// AS creates new EspressoSchemaMigrationsTable with assigned alias
func (a EspressoSchemaMigrationsTable) AS(alias string) *EspressoSchemaMigrationsTable {
	return newEspressoSchemaMigrationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EspressoSchemaMigrationsTable with assigned schema name
func (a EspressoSchemaMigrationsTable) FromSchema(schemaName string) *EspressoSchemaMigrationsTable {
	return newEspressoSchemaMigrationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EspressoSchemaMigrationsTable with assigned table prefix
func (a EspressoSchemaMigrationsTable) WithPrefix(prefix string) *EspressoSchemaMigrationsTable {
	return newEspressoSchemaMigrationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EspressoSchemaMigrationsTable with assigned table suffix
func (a EspressoSchemaMigrationsTable) WithSuffix(suffix string) *EspressoSchemaMigrationsTable {
	return newEspressoSchemaMigrationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEspressoSchemaMigrationsTable(schemaName, tableName, alias string) *EspressoSchemaMigrationsTable {
	return &EspressoSchemaMigrationsTable{
		espressoSchemaMigrationsTable: newEspressoSchemaMigrationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                      newEspressoSchemaMigrationsTableImpl("", "excluded", ""),
	}
}

func newEspressoSchemaMigrationsTableImpl(schemaName, tableName, alias string) espressoSchemaMigrationsTable {
	var (
		VersionColumn  = postgres.IntegerColumn("version")
		DirtyColumn    = postgres.BoolColumn("dirty")
		allColumns     = postgres.ColumnList{VersionColumn, DirtyColumn}
		mutableColumns = postgres.ColumnList{DirtyColumn}
	)

	return espressoSchemaMigrationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Version: VersionColumn,
		Dirty:   DirtyColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
