name: CI with PostgreSQL

on: push

permissions:
  contents: write

env:
  ROLLUPS_NODE_VERSION: 2.0.0-alpha.4
  ESPRESSO_BASE_URL: http://localhost:24000

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      CARTESI_DATABASE_CONNECTION: 'postgres://postgres:password@localhost:5432/rollupsdb?sslmode=disable'
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: rollupsdb
        options: --name postgres
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Clone Node V2 (avoid submodules)
        run: |
          git clone -b v${ROLLUPS_NODE_VERSION} --depth 1 --recurse-submodules https://github.com/cartesi/rollups-node.git

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready";
              exit 0;
            fi;
            sleep 2;
          done;
          echo "PostgreSQL did not become ready in time";
          exit 1;

      - name: Install go migrate cli
        run: |
          GO_MIGRATE_VERSION=4.18.2
          ARCH=$(dpkg --print-architecture || uname -m)
          case "$ARCH" in
              amd64|x86_64)
                  MIGRATE_URL="https://github.com/golang-migrate/migrate/releases/download/v${GO_MIGRATE_VERSION}/migrate.linux-amd64.deb"
                  ;;
              arm64|aarch64)
                  MIGRATE_URL="https://github.com/golang-migrate/migrate/releases/download/v${GO_MIGRATE_VERSION}/migrate.linux-arm64.deb"
                  ;;
              armhf|armv7l)
                  MIGRATE_URL="https://github.com/golang-migrate/migrate/releases/download/v${GO_MIGRATE_VERSION}/migrate.linux-armv7.deb"
                  ;;
              i386)
                  MIGRATE_URL="https://github.com/golang-migrate/migrate/releases/download/v${GO_MIGRATE_VERSION}/migrate.linux-386.deb"
                  ;;
              *)
                  echo "Unsupported architecture: $ARCH"
                  exit 1
                  ;;
          esac
          curl -fsSL "$MIGRATE_URL" -o /tmp/migrate.deb
          sudo dpkg -i /tmp/migrate.deb
          rm /tmp/migrate.deb
          migrate --version

      - name: Migrate Node V2 DB
        run: |
          cd rollups-node
          eval $(make env)
          make migrate
      
      - name: Migrate Espresso DB
        run: |
          migrate -source file://internal/repository/postgres/schema/migrations -database "$CARTESI_DATABASE_CONNECTION&x-migrations-table=espresso_schema_migrations" up

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Run devnet (Anvil)
        run: |
          cd rollups-node
          make devnet
          make start-devnet
      
      - name: Build Espresso image
        run: |
          docker build --build-arg TARGETARCH=amd64 \
            --build-arg ROLLUPS_NODE_VERSION=${ROLLUPS_NODE_VERSION} \
            -t espresso -f ./ci/Dockerfile .

      - name: Dump database
        env:
          PGPASSWORD: password
        run: |
          pg_dump -h localhost -U postgres -d rollupsdb > rollupsdb-dump.sql

      - name: Save Docker image
        run: |
          docker save cartesi/rollups-node-devnet:devel -o docker-devnet-image.tar
          docker save espresso -o docker-espresso-image.tar

      - name: Tar DB bindings
        run: |
          tar -czf rollupsdb-postgres-bindings.tar.gz internal/repository/postgres/db/

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: docker-*
  
      - name: Upload database dump
        uses: actions/upload-artifact@v4
        with:
          name: db-dump
          path: rollupsdb-*
  
  local_e2e_test:
    name: e2e tests (Espresso Local)
    runs-on: ubuntu-latest
    env:
      CARTESI_FEATURE_ESPRESSO_READER_ENABLED: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Run docker compose
        run: |
          docker compose up --wait

      - name: Deploy Echo Dapp
        env:
          ACCOUNT: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'
          PRIVATE_KEY: 'ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80'
          RPC_URL: 'http://localhost:8545'
        run: |
          docker exec cartesi_espresso cartesi-rollups-cli app deploy -n echo-dapp -t applications/echo-dapp/ -v -D 0x8579fd0c000000000000000000000000b6b39fb3dd926a9e3fbc7a129540eebea3016a6c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d903
          sleep 10
          docker logs --timestamps cartesi_espresso

      - name: Send L1 InputBox transaction
        run: |
          INPUT=0xdead01beef; \
          INPUT_BOX_ADDRESS=0xB6b39Fb3dD926A9e3FBc7A129540eEbeA3016a6c; \
          APPLICATION_ADDRESS=0x01e800bbE852aeb27cE65604709134Ea63782c6B; \
          cast send \
              --mnemonic "test test test test test test test test test test test junk" \
              --rpc-url "http://localhost:8545" \
              $INPUT_BOX_ADDRESS "addInput(address,bytes)(bytes32)" $APPLICATION_ADDRESS $INPUT

      - name: Send L2 EIP 712 transaction
        env:
          SENDER_PRIVATE_KEY: ${{ secrets.SENDER_PRIVATE_KEY }}
          TRANSACTION_BASE_URL: http://localhost:8080
        run: |
          git clone --recurse-submodules https://github.com/Calindra/nonodo.git
          cd nonodo/eip712-client-js
          npm i
          APP_ADDRESS=0x01e800bbE852aeb27cE65604709134Ea63782c6B INPUT=0xdeadbeefdeadbeef node index.js || true
          sleep 10
          docker logs --timestamps cartesi_espresso

      - name: Espresso dev node logs
        run: docker logs --timestamps espresso-dev-node

      - name: Query Database for Output
        run: |
          MAX_RETRIES=30
          for i in $(seq 1 $MAX_RETRIES); do
            RESULT=$(docker exec -i db psql -U postgres -d rollupsdb -t -c "SELECT * FROM public.output;")
            if [[ "$RESULT" =~ "dead01beef" && "$RESULT" =~ "deadbeefdeadbeef" ]]; then
              echo "Result found: $RESULT"
              exit 0
            fi
            echo "Result: $RESULT"
            echo "Waiting for result... attempt $i"
            sleep 5
          done
          echo "Timeout reached: result not found"
          docker logs --timestamps cartesi_espresso
          exit 1

  integration_test:
    name: Integration tests (Local Espresso Dev Node)
    runs-on: ubuntu-latest
    needs: [build]
    env:
      CARTESI_FEATURE_ESPRESSO_READER_ENABLED: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Run docker compose
        run: |
          docker compose up --wait

      - name: Wait for Espresso dev node to be available
        run: |
          ./ci/scripts/espresso-dev-node-health.sh
          docker ps

      - name: Espresso dev node logs
        run: |
          docker logs --timestamps espresso-dev-node

      - name: Install Echo App
        run: |
          docker logs --timestamps c_espresso
          docker exec c_espresso cartesi-rollups-cli app deploy -n echo-dapp -t applications/echo-dapp/ -D 0x8579fd0c000000000000000000000000b6b39fb3dd926a9e3fbc7a129540eebea3016a6c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d903

      - name: Run integration tests
        env:
          CARTESI_AUTH_MNEMONIC: 'test test test test test test test test test test test junk'
          CARTESI_BLOCKCHAIN_HTTP_ENDPOINT: http://localhost:8545
          CARTESI_BLOCKCHAIN_WS_ENDPOINT: ws://localhost:8545
          CARTESI_BLOCKCHAIN_ID: 13370
          CARTESI_CONTRACTS_INPUT_BOX_ADDRESS: '0xB6b39Fb3dD926A9e3FBc7A129540eEbeA3016a6c'
          CARTESI_CONTRACTS_AUTHORITY_FACTORY_ADDRESS: '0x451f57Ca716046D114Ab9ff23269a2F9F4a1bdaF'
          CARTESI_CONTRACTS_APPLICATION_FACTORY_ADDRESS: '0x2210ad1d9B0bD2D470c2bfA4814ab6253BC421A0'
          CARTESI_CONTRACTS_SELF_HOSTED_APPLICATION_FACTORY_ADDRESS: '0x4a409e1CaB9229711C4e1f68625DdbC75809e721'
          CARTESI_DATABASE_CONNECTION: 'postgres://postgres:password@localhost:5433/rollupsdb?sslmode=disable'
          ESPRESSO_BASE_URL: 'http://localhost:24000'
          ESPRESSO_SERVICE_ENDPOINT: '0.0.0.0:8080'
          CARTESI_FEATURE_MACHINE_HASH_CHECK_ENABLED: false
          CARTESI_FEATURE_INPUT_READER_ENABLED: false
        run: |
          echo "chain id = $CARTESI_BLOCKCHAIN_ID"
          go test -v --timeout 10m -p 1 ./...

  test:
    name: e2e tests (EVM Reader)
    runs-on: ubuntu-latest
    needs: [build]

    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: rollupsdb
        options: --name postgres

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Download database dump
        uses: actions/download-artifact@v4
        with:
          name: db-dump

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Load Docker image
        run: |
          docker load -i docker-devnet-image.tar
          docker load -i docker-espresso-image.tar
      
      - name: Run devnet (Anvil)
        run: |
          docker run --rm --name devnet -p 8545:8545 -d cartesi/rollups-node-devnet:devel
  
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready";
              exit 0;
            fi;
            sleep 2;
          done;
          echo "PostgreSQL did not become ready in time";
          exit 1;

      - name: Restore database
        env:
          PGPASSWORD: password
        run: |
          psql -h localhost -U postgres -d rollupsdb < rollupsdb-dump.sql

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Run Espresso image (pure with EVM reader)
        run: |
          docker run -d --env-file ./ci/env.nodev2-local \
            --rm --network=host \
            --name c_espresso espresso

      - name: Install Echo App
        run: |
          docker logs --timestamps c_espresso
          docker exec c_espresso cartesi-rollups-cli app deploy -n echo-dapp -t applications/echo-dapp/ -v

      - name: Send input transaction
        run: |
          INPUT=0xdeadbeef; \
          INPUT_BOX_ADDRESS=0xB6b39Fb3dD926A9e3FBc7A129540eEbeA3016a6c; \
          APPLICATION_ADDRESS=0x8e3c7bF65833ccb1755dAB530Ef0405644FE6ae3; \
          cast send \
              --mnemonic "test test test test test test test test test test test junk" \
              --rpc-url "http://localhost:8545" \
              $INPUT_BOX_ADDRESS "addInput(address,bytes)(bytes32)" $APPLICATION_ADDRESS $INPUT

      - name: Query Database for Output
        run: |
          MAX_RETRIES=30
          for i in $(seq 1 $MAX_RETRIES); do
            RESULT=$(docker exec -i postgres psql -U postgres -d rollupsdb -t -c "SELECT * FROM public.output;")
            if [[ "$RESULT" =~ "deadbeef" ]]; then
              echo "Result found: $RESULT"
              exit 0
            fi
            echo "Result: $RESULT"
            echo "Waiting for result... attempt $i"
            sleep 5
          done
          echo "Timeout reached: result not found"
          docker logs --timestamps c_espresso
          exit 1

      - name: Copy binaries
        run: |
          docker cp c_espresso:/usr/bin/cartesi-machine .
          docker cp c_espresso:/usr/bin/cartesi-machine-stored-hash .
          docker cp c_espresso:/usr/bin/cartesi-rollups-advancer .
          docker cp c_espresso:/usr/bin/cartesi-rollups-claimer .
          docker cp c_espresso:/usr/bin/cartesi-rollups-cli .
          docker cp c_espresso:/usr/bin/cartesi-rollups-espresso-reader .
          docker cp c_espresso:/usr/bin/cartesi-rollups-evm-reader .
          docker cp c_espresso:/usr/bin/cartesi-rollups-node .
          docker cp c_espresso:/usr/bin/cartesi-rollups-validator .
          ls -la

      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v4
        with:
          name: cartesi-binaries
          path: cartesi-*

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, integration_test, local_e2e_test]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # TODO: remove in the future unrelated binaries.
      - name: Download binaries artifact
        uses: actions/download-artifact@v4
        with:
          name: cartesi-binaries

      - name: Download DB files
        uses: actions/download-artifact@v4
        with:
          name: db-dump

      - name: Publish Github release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          body_path: CHANGELOG.md
          files: |
            cartesi-*
            rollupsdb-*

  releases-matrix:
    name: Build binaries for release
    runs-on: ubuntu-latest
    needs: [release]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64, riscv64]
        exclude:
          - goarch: arm64
            goos: windows
          - goarch: riscv64
            goos: windows
          - goarch: riscv64
            goos: darwin
    steps:
      - uses: actions/checkout@v4

      - uses: wangyoucao577/go-release-action@v1
        with:
          overwrite: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          extra_files: CHANGELOG.md LICENSE README.md
          binary_name: cartesi-rollups-espresso-reader
